@page "/AddAppointment"
@using System.Text.Json
@using System.Globalization
@using System.Net.Http.Json
@using PlanMeisterShared
@using PlanMeisterShared.Enum
@using PlanMeisterShared.Models
@using PlanMeisterShared.Service
@inject NavigationManager NavigationManager
@inject DayScheduleService DayScheduleService
@inject EmployeeService EmployeeService
@inject HttpClient HttpClient


<EditForm Model="Appointment" OnValidSubmit="HandleValidSubmit" OnInitialized="Initialize">
    <div class="form-group">
        <label for="title">Title:</label>
        <input id="title" name="title" class="form-control" @bind="@Appointment.Title" required />
        <ValidationMessage For="@(() => Appointment.Title)"/>
    </div>
    
    <div class="form-group">
        <label for="description">Description:</label>
        <input id="description" name="description" class="form-control" @bind="@Appointment.Description" required />
        <ValidationMessage For="@(() => Appointment.Description)"/>
    </div>
    
    <div class="form-group">
        <label for="appointment-type">Appointment Type</label>
        <select id="appointment-type" class="form-control" @bind="@Appointment.Type" required>
            @foreach (var value in Enum.GetValues(typeof(AppointmentType)))
            {
                <option value="@value">@value</option>
            }
        </select>
        <ValidationMessage For="@(() => Appointment.Type)"/>
    </div>
    
    <div class="form-group">
        <label for="employee">Employee</label>
        <select id="employee" class="form-control" required @bind="@Appointment.EmployeeId">
            <option>Maak uw keuze</option>
            @foreach (var employee in Employees)
            {
                <option value="@employee.EmployeeId">@employee.Name</option>
            }
        </select>
    </div>
    
    <div class="form-group">
        <label for="date">From:</label>
        <input TValue="DateTime" id="date" name="date" class="form-control" type="datetime-local" @bind="Appointment.StartDateTime"/>
        
        <label for="time">Until:</label>
        <input TValue="DateTime" id="time" name="time" class="form-control" type="datetime-local" @bind="Appointment.EndDateTime"/>
    </div>
    
    <Check TValue="bool" @bind-Checked="@Appointment.Billable">Billable?</Check>

    <button type="submit" class="btn btn-primary">Add Appointment</button>
</EditForm>

@code
{
    private Appointment Appointment = new Appointment()
    {
        // Zet de actuele datum en tijd in het formulier.
        StartDateTime = DateTime.Now,
        EndDateTime = DateTime.Now
    };

    private IEnumerable<Employee> Employees { get; set; } = new List<Employee>();
    
    private async Task<int> GetDayScheduleIdByDate(DateTime date)
    {
        return await DayScheduleService.GetDayScheduleIdByDate(date);
    }

    private async Task AddAppointmentToApi()
    {
        var httpClient = HttpClient;

        var dayScheduleId = await GetDayScheduleIdByDate(Appointment.StartDateTime);
        
        var addAppointment = new Appointment
        {
            Title = Appointment.Title,
            Description = Appointment.Description,
            Type = Appointment.Type,
            StartDateTime = Appointment.StartDateTime,
            EndDateTime = Appointment.EndDateTime,
            Billable = Appointment.Billable,
            DayScheduleId = dayScheduleId,
            EmployeeId = Appointment.EmployeeId
        };
        
        var response = await httpClient.PostAsJsonAsync("/api/appointment", addAppointment);
        response.EnsureSuccessStatusCode();
        NavigationManager.NavigateTo("/weekschedule");
    }
    
    private async void HandleValidSubmit()
    {
        await AddAppointmentToApi();
    }
    
    protected override async Task OnInitializedAsync()
    {
        Employees = await EmployeeService.GetEmployees();
    }
}