@page "/EditRequest"
@using System.Text.Json
@using System.Globalization
@using System.Net.Http.Json
@using PlanMeisterShared
@using PlanMeisterShared.Enum
@using PlanMeisterShared.Models
@using PlanMeisterShared.Service
@inject NavigationManager NavigationManager
@inject EmployeeService EmployeeService
@inject RequestService RequestService
@inject IJSRuntime JsRuntime

<EditForm Model="Request" OnValidSubmit="HandleValidSubmit">
    <div class="form-group">
        <label for="request-type">Request Type</label>
        <select id="request-type" class="form-control" @bind="@Request.RequestType" required>
            @foreach (var value in Enum.GetValues(typeof(RequestType)))
            {
                <option value="@value">@value</option>
            }
        </select>
        <ValidationMessage For="@(() => Request.RequestType)" />
    </div>

    <div class="form-group">
        <label for="employee">Employee</label>
        <select id="employee" class="form-control" @bind="@Request.EmployeeId" required>
            <option>Maak uw keuze</option>
            @foreach (var employee in Employees)
            {
                <option value="@employee.EmployeeId">@employee.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="date">From:</label>
        <input TValue="DateTime" id="date" name="date" class="form-control" type="datetime-local" @bind="Request.DateTimeFrom" />

        <label for="time">Until:</label>
        <input TValue="DateTime" id="time" name="time" class="form-control" type="datetime-local" @bind="Request.DateTimeTill" />
    </div>

    <button type="submit" class="btn btn-primary">Edit Request</button>
</EditForm>

@code
{
    //BUG: Als je weg klikt van de edit button en je klikt opnieuw op een edit button, wordt niet de juiste data weergegeven.
    
    private Request Request = new Request();

    private IEnumerable<Employee> Employees { get; set; } = new List<Employee>();

    [Parameter]
    public int RequestId { get; set; }

    private bool isLoaded = false;

    private async Task AddRequestToApi()
    {
        var httpClient = new HttpClient();

        var addRequest = new Request()
        {
            RequestId = RequestId,
            RequestType = Request.RequestType,
            DateTimeFrom = Request.DateTimeFrom,
            DateTimeTill = Request.DateTimeTill,
            RequestStatus = RequestStatus.Processing,
            EmployeeId = Request.EmployeeId
        };

        var response = await httpClient.PutAsJsonAsync($"http://localhost:5175/api/Request/{RequestId}", addRequest);
        response.EnsureSuccessStatusCode();

        await JsRuntime.InvokeVoidAsync("location.reload");
    }

    private async Task HandleValidSubmit()
    {
        await AddRequestToApi();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (RequestId != 0 && !isLoaded)
        {
            Request = await RequestService.GetRequestById(RequestId);
            Employees = await EmployeeService.GetEmployees();
            isLoaded = true;
        }
    }
}
