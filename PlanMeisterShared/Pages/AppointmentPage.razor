@page "/appointment"
@using PlanMeisterShared.Service
@using PlanMeisterShared.Models
@inject AppointmentService AppointmentService
@inject EmployeeService EmployeeService
@inject IJSRuntime JsRuntime

<PageTitle>Appointment</PageTitle>

<Modal @ref="modalRefAddAppointment">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add Appointment</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <AddAppointment></AddAppointment>
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @ref="modalRefEditAppointment">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit Appointment</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <EditAppointment AppointmentId="@selectedAppointmentId"></EditAppointment>
        </ModalBody>
    </ModalContent>
</Modal>


<h1>Appointments</h1>
<div class="d-flex mb-3">
    <button class="btn btn-primary me-2" @onclick="() => ShowModalAddAppointment()">Add Appointment</button>
    <a href="/">
        <button class="btn btn-primary">Back home</button>
    </a>
</div>



@if (Appointments == null)
{
    <h3>Appointments are loading</h3>
}
else
{
    @if (Appointments == null)
    {
        <h3>Appointments are loading</h3>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-bordered">
                <thead>
                <tr>
                    <th>Employee</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Start Date/Time</th>
                    <th>End Date/Time</th>
                    <th>Billable</th>
                    <th>Details</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                    @foreach (var appointment in Appointments)
                    {
                        <tr>
                            <td>@appointment.EmployeeName</td>
                            <td>@appointment.Title</td>
                            <td>@appointment.Description</td>
                            <td>@appointment.Type</td>
                            <td>@appointment.StartDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                            <td>@appointment.EndDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                            <td>@(appointment.Billable ? "Yes" : "No")</td>
                            <td><a href="/AppointmentDetails?appointmentid=@appointment.AppointmentId">Show Details</a></td>
                            <td>
                            <button class="btn btn-primary" @onclick="() => EditAppointment(appointment.AppointmentId)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteAppointment(appointment.AppointmentId)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

}

@code
{
    private IEnumerable<Appointment> Appointments { get; set; }
    private Employee Employee { get; set; }
    private int selectedAppointmentId;

    private Modal modalRefAddAppointment;
    private Modal modalRefEditAppointment;


    protected override async Task OnInitializedAsync()
    {
        Appointments = await AppointmentService.GetAppointments();
        
        foreach ( var appointment in Appointments)
        {
            appointment.EmployeeName = await GetEmployeeName(appointment.EmployeeId);
        }
    }
    
    private async Task<string> GetEmployeeName(int employeeId)
    {
        Employee = await EmployeeService.GetEmployeeById(employeeId);
        return Employee.Name;
    }

    private Task ShowModalAddAppointment()
    {
        return modalRefAddAppointment.Show();
    }
    
    private Task ShowModalEditAppointment()
    {
        return modalRefEditAppointment.Show();
    }

    private void EditAppointment(int appointmentId)
    {
        selectedAppointmentId = appointmentId;
        ShowModalEditAppointment();
    }

    private async void DeleteAppointment(int appointmentId)
    {
        await AppointmentService.DeleteAppointment(appointmentId);
        await JsRuntime.InvokeVoidAsync("location.reload");
    }
}