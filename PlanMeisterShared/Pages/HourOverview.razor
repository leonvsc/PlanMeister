@page "/houroverview"
@using PlanMeisterShared.Models
@using PlanMeisterShared.Service
@inject AppointmentService AppointmentService
@inject EmployeeService EmployeeService

<PageTitle>Hour Overview</PageTitle>

<Modal @ref="modalRefEditAppointment">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit Appointment</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <EditAppointmentOperator AppointmentId="@selectedAppointmentId"></EditAppointmentOperator>
        </ModalBody>
    </ModalContent>
</Modal>

<h1>Hour Overview</h1>

<div class="d-flex mb-3">
    <a href="/">
        <button class="btn btn-primary">Back home</button>
    </a>
</div>

<div class="d-flex mb-2 form-group">
    <select class="form-control form-select me-2" @bind="@selectedEmployeeId">
        <option value="0">All Employees</option>
        @foreach (var employee in Employees)
        {
            <option value="@employee.EmployeeId">@employee.Name</option>
        }
    </select>
    <button class="btn btn-primary me-2" @onclick="FilterRequests">Filter</button>
    @if (isFiltered)
    {
        <button class="btn btn-secondary" @onclick="ClearFilter">Clear</button>
    }
</div>

@if (Appointments == null)
{
    <h3>Appointments are loading</h3>
}
else
{
    @if (Appointments == null)
    {
        <h3>Appointments are loading</h3>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-bordered">
                <thead>
                <tr>
                    <th>Employee</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Start Date/Time</th>
                    <th>End Date/Time</th>
                    <th>Duration</th>
                    <th>Details</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var appointment in Appointments)
                {
                    <tr>
                        <td>@appointment.EmployeeName</td>
                        <td>@appointment.Title</td>
                        <td>@appointment.Description</td>
                        <td>@appointment.Type</td>
                        <td>@appointment.StartDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@appointment.EndDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@FormatDuration(appointment.EndDateTime - appointment.StartDateTime)</td>
                        <td>
                            <a href="/AppointmentDetails?appointmentid=@appointment.AppointmentId">Show Details</a>
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditAppointment(appointment.AppointmentId)">Edit</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
}

@code
{
    private IEnumerable<Appointment> Appointments { get; set; }
    private IEnumerable<Employee> Employees { get; set; } = new List<Employee>();
    private int selectedAppointmentId;
    private int selectedEmployeeId;
    private bool isFiltered;

    private Modal modalRefEditAppointment;

    protected override async Task OnInitializedAsync()
    {
        Appointments = await AppointmentService.GetAppointments();
        Employees = await EmployeeService.GetEmployees();

        foreach (var appointment in Appointments)
        {
            appointment.EmployeeName = await GetEmployeeName(appointment.EmployeeId);
        }
    }

    private async Task<string> GetEmployeeName(int employeeId)
    {
        var employee = await EmployeeService.GetEmployeeById(employeeId);
        return employee.Name;
    }

    private string FormatDuration(TimeSpan duration)
    {
        var formattedDuration = $"{(int)duration.TotalHours} hours {duration.Minutes} minutes";
        return formattedDuration;
    }

    private void EditAppointment(int appointmentId)
    {
        selectedAppointmentId = appointmentId;
        ShowModalEditAppointment();
    }

    private void ShowModalEditAppointment()
    {
        modalRefEditAppointment.Show();
    }

    private async Task FilterRequests()
    {
        if (selectedEmployeeId != 0)
        {
            Appointments = await AppointmentService.GetAppointmentsByEmployee(selectedEmployeeId);
            foreach (var appointment in Appointments)
            {
                appointment.EmployeeName = await GetEmployeeName(appointment.EmployeeId);
            }
            isFiltered = true;
        }
        else
        {
            await ClearFilter();
        }
    }

    private async Task ClearFilter()
    {
        selectedEmployeeId = 0;
        Appointments = await AppointmentService.GetAppointments();
        foreach (var appointment in Appointments)
        {
            appointment.EmployeeName = await GetEmployeeName(appointment.EmployeeId);
        }
        isFiltered = false;
    }
}