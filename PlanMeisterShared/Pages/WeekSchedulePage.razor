@page "/weekschedule"
@using PlanMeisterShared.Models
@using PlanMeisterShared.Service
@inject AppointmentService AppointmentService
@inject EmployeeService EmployeeService
@inject DayScheduleService DayScheduleService

<PageTitle>WeekSchedule</PageTitle>

<Modal @ref="modalRefAppointment">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add Appointment</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <AddAppointment></AddAppointment>
        </ModalBody>
    </ModalContent>
</Modal>

<h3>WeekSchedule</h3>

<div class="d-flex">
    <AuthorizeView Roles="Planner">
        <button class="btn btn-primary me-2" @onclick="() => ShowAppointmentModal()">Add Appointment</button>
    </AuthorizeView>
    <a href="/">
        <button class="btn btn-primary">Back home</button>
    </a>
</div>

<div class="form-group">
    <label for="weekNumberInput">Week Number:</label>
    <div class="input-group">
        <input id="weekNumberInput" class="form-control" type="number" @bind="@WeekNumber"/>
        <div class="input-group-append">
            <button class="btn btn-primary" @onclick="@LoadAppointments">Load Appointments</button>
        </div>
    </div>
</div>


@if (_appointments != null && Employees != null)
{
    @if (_appointments.Any())
    {
        <div class="table-responsive">
            <table class="table table-bordered">
                <thead>
                <tr>
                    <th></th>
                    @foreach (var day in _daysOfWeek)
                    {
                        <th>@day</th>
                    }
                </tr>
                </thead>
                <tbody>
                @foreach (var employee in Employees)
                {
                    <tr>
                        <th>@employee.Name</th>
                        @foreach (var day in _daysOfWeek)
                        {
                            <td>
                                @foreach (var appointment in _appointments.Where(a => a.EmployeeId == employee.EmployeeId && a.StartDateTime.DayOfWeek.ToString() == day))
                                {
                                    <div>@appointment.Title</div>
                                    <div>@appointment.Type</div>
                                    <a href="/AppointmentDetails?appointmentid=@appointment.AppointmentId">Show Details</a>
                                }
                            </td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p>No appointments found for the specified week.</p>
    }
}
else
{
    <p>Loading appointments...</p>
}

@code
{
    private readonly List<string> _daysOfWeek = new() { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
    private IEnumerable<Employee> Employees { get; set; }
    private Modal modalRefAppointment;


    private int WeekNumber { get; set; }

    List<Appointment> _appointments = new();

    private async Task LoadAppointments()
    {
        _appointments = await AppointmentService.GetAppointmentsByWeek(WeekNumber);
    }

    protected override async Task OnInitializedAsync()
    {
        Employees = await EmployeeService.GetEmployees();
    }

    private Task ShowAppointmentModal()
    {
        return modalRefAppointment.Show();
    }
}