@page "/EditHourPreference"
@using PlanMeisterShared.Models
@using PlanMeisterShared.Service
@using PlanMeisterShared.Enum
@inject NavigationManager NavigationManager
@inject EmployeeService EmployeeService
@inject HourPreferenceService HourPreferenceService
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient

<EditForm Model="HourPreference" OnValidSubmit="HandleValidSubmit" OnInitialized="Initialize">
    <div class="form-group">
        <label for="weekNumber">Week number</label>
        <input id="weekNumber" class="form-control" type="number" @bind="@HourPreference.WeekNumber" required/>
        <ValidationMessage For="@(() => HourPreference.WeekNumber)"/>
    </div>

    <div class="form-group">
        <label for="AmountOfHours">Amount of Hours</label>
        <input id="AmountOfHours" class="form-control" type="number" @bind="@HourPreference.AmountOfHours" required/>
        <ValidationMessage For="@(() => HourPreference.AmountOfHours)"/>
    </div>

    <div class="form-group">
        <label for="employee">Employee</label>
        <select id="employee" class="form-control form-select" @bind="@HourPreference.EmployeeId" required>
            <option>Maak uw keuze</option>
            @foreach (var employee in Employees)
            {
                <option value="@employee.EmployeeId">@employee.Name</option>
            }
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Edit Hour Preference</button>
</EditForm>

@code
{
    //BUG: Als je weg klikt van de edit button en je klikt opnieuw op een edit button, wordt niet de juiste data weergegeven.

    private HourPreference HourPreference = new();

    private IEnumerable<Employee> Employees { get; set; } = new List<Employee>();

    [Parameter]
    public int HourPreferenceId { get; set; }

    private bool isLoaded = false;

    private async Task AddHourPreferenceToApi()
    {
        var httpClient = HttpClient;

        var addHourPreference = new HourPreference
        {
            HourPreferenceId = HourPreferenceId,
            WeekNumber = HourPreference.WeekNumber,
            AmountOfHours = HourPreference.AmountOfHours,
            HourPreferenceStatus = HourPreferenceStatus.Processing,
            EmployeeId = HourPreference.EmployeeId
        };

        var response = await httpClient.PutAsJsonAsync($"/api/HourPreference/{HourPreferenceId}", addHourPreference);
        response.EnsureSuccessStatusCode();

        await JsRuntime.InvokeVoidAsync("location.reload");
    }

    private async Task HandleValidSubmit()
    {
        await AddHourPreferenceToApi();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (HourPreferenceId != 0 && !isLoaded)
        {
            HourPreference = await HourPreferenceService.GetHourPreferenceById(HourPreferenceId);
            Employees = await EmployeeService.GetEmployees();
            isLoaded = true;
        }
    }
}